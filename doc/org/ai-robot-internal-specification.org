#+TITLE: AI robot 内部仕様
#+DATE: 2015-01-12 15:55:37 Monday

#+OPTIONS: ^:{}
#+LINK_HOME: http://home.fnal.gov/~neilsen
#+LINK_UP: http://home.fnal.gov/~neilsen/notebook
#+BIND: org-export-publishing-directory "./tmp"

#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:0 path:http://thomasf.github.io/solarized-css/org-info.min.js

#+BEGIN_COMMENT
http://asciiflow.com/
#+END_COMMENT

* 概要
- 本プログラムは、人工知能を持つロボットのプログラムである
- ロボットは超音波センサーによって周囲の障害物を検知し、自ら周囲の地図を作成する
- 一旦地図のデータを手に入れたロボットは、現在位置を忘れた後、再度その地図のどこかに配置されると自ら地図上の位置を割り出す
- ロボットの現在位置ならびに地図データは、無線により遠隔のパソコンにリアルタイムに送られる
- 複数の動作モードを持ち、マニュアルモードでは遠隔のパソコンから操作できる
- ハードウエアのロボットの代わりに、ソフトウエアシミュレーターに置き換えることができ、サービス層以下のロジックはそのまま使用できる
* 動作とUI
** ドメインロジック
#+BEGIN_SRC plantuml :file ./images/domain_logic.png :exports none
package "Robot" {
  node "State" {
    [Communication]
    [Wheels]
    [Sensor]
    [Map]
  } 
}

package "PC" {
  node "Controller" {
    [Monitor]
    [Communication2]
  } 
}
#+END_SRC

** ロボット本体

*** TODO 基本動作
- main関数に無限ループを置き、システムに異常が起こらない限り、その無限ループを抜けることはない
#+BEGIN_SRC plantuml :file ./images/main_activity-flow_chart.png :exports none
(*) --> "Initialization"

if "Some Test" then
  -->[true] "Some Activity"
  --> "Another activity"
  -right-> (*)
else
  ->[false] "Something else"
  -->[Ending process] (*)
endif
#+END_SRC

#+begin_src ditaa :file ./images/action-flow.png :exports none
                    +------------------------+            
                    |                        |            
                    |  System setup          |            
                    |                        |            
                    |                        |            
                    +-----------+------------+            
                                |                         
                                |                         
                                |                         
                                |                         
                                +------------------------+
                                |                        |
           +--------------------------------+            |
           |                                |            |
           |                                |            |
           |  Check state                   |            |
           |                                |            |
           |                                |            |
           |  There things to do            |            |
           |     +                      +   |            |
           +--------------------------------+            |
                 |                      |                |
               true                    false             |
                 |                      |                |
                 |                      |                |
                 |               +------+-------------+  |
                 |               |                    |  |
                 |               |  Wait for manual   |  |
                 |               |  operation         |  |
                 |               |                    |  |
                 |               |                    |  |
                 |               +--------------------+  |
                 |                                       |
                 |                                       |
                 |                                       |
                 |                                       |
                 v                                       |
     +------------------------+                          |
     |                        |                          |
     |   Sense obstacles      |                          |
     |                        |                          |
     |                        |                          |
     +-----------+------------+                          |
                 |                                       |
                 v                                       |
     +------------------------+                          |
     |                        |                          |
     |   Update map           |                          |
     |                        |                          |
     |                        |                          |
     +-----------+------------+                          |
                 |                                       |
                 v                                       |
     +------------------------+                          |
     |                        |                          |
     |   Find the next place  |                          |
     |   to explore           |                          |
     |                        |                          |
     +-----------+------------+                          |
                 |                                       |
                 v                                       |
     +------------------------+                          |
     |                        |                          |
     |   Calculate the ideal  |                          |
     |   path to that place   |                          |
     |                        |                          |
     +-----------+------------+                          |
                 |                                       |
                 v                                       |
     +------------------------+                          |
     |  Move                  |                          |
     |                        |                          |
     |                        |                          |
     |                        |                          |
     +-----------+------------+                          |
                 |                                       |
                 |                                       |
                 |                                       |
                 +---------------------------------------+
#+end_src 

*** 状態表示
チップLEDによる状態表示
- 高輝度青色チップＬＥＤ　２０１２サイズ　L-C170LBCT
[[http://akizukidenshi.com/catalog/g/gI-00697/]]

- 赤色チップＬＥＤ　OSHR1608　３５ｍｃｄ
[[http://akizukidenshi.com/catalog/g/gI-03978/]]

* 人工知能について
- 本プロジェクトは、人工知能（Artificial Intelligence: 以下、AI）に重点が置かれる

** Particle Filter
Particle Filter（[[http://ja.wikipedia.org/wiki/%E7%B2%92%E5%AD%90%E3%83%95%E3%82%A3%E3%83%AB%E3%82%BF][粒子フィルタ Wikipedia]]）
** Hidden Markov Model
[[http://en.wikipedia.org/wiki/Hidden_Markov_model][Hidden Markov Model]]

* ハードウエア
** 物理的サイズ
** モジュール
*** マイコン
mbed [[http://developer.mbed.org/platforms/mbed-LPC1768/][LPC1768]] を使用
[[file:./images/lpc1768.jpg]]
**** TODO 特徴
**** TODO スペック
***** pin配置
[[file:./images/lpc1768-pin_configuration.jpg]]
*** バッテリー
*** モーター
*** モータードライバ
[[http://jp.rs-online.com/web/p/motor-driver-ics/7703797/][TB6612FNG]]
[[http://docs-asia.electrocomponents.com/webdocs/1159/0900766b8115965f.pdf][データシート]]

#+BEGIN_COMMENT
以前の使用予定
[[http://akizukidenshi.com/catalog/g/gI-05087/][フルブリッジドライバ 7V BD6211F-E2]]
[[file:http://akizukidenshi.com/img/goods/C/I-05087.jpg]]
#+END_COMMENT

*** 超音波距離センサ
[[http://akizukidenshi.com/catalog/g/gM-05400/][パララックス社超音波距離センサーモジュール]]
#+attr_html: :width 200px
[[file:http://akizukidenshi.com/img/goods/C/M-05400.jpg]]
[[http://akizukidenshi.com/download/ds/parallax/28015-PING-Sensor-Product-Guide-v2.0.pdf][データシート]]

*** 無線モジュール
[[http://akizukidenshi.com/catalog/g/gM-06195/][XBee series2]]
#+attr_html: :width 200px
[[file:http://akizukidenshi.com/img/goods/C/M-06195.jpg]]
[[http://akizukidenshi.com/catalog/g/gK-06188/][XBee USBインターフェースボード]]
#+attr_html: :width 200px
[[file:http://akizukidenshi.com/img/goods/C/K-06188.jpg]]
[[https://www.switch-science.com/catalog/1793/][XStick ZB]]
#+attr_html: :width 200px
[[file:https://docid81hrs3j1.cloudfront.net/imagecontent/1793_002.jpg]]
** 回路
*** 電源回路
*** モーター回路
*** 無線回路

* ソフトウエア
** レイヤー構造

#+BEGIN_SRC plantuml :file ./images/entire-layered-architecture.png 
package "Presentation (hardware dependent)" {
  [XBee controller]
  [Wheels]
  [Sensor]
}

package "Domain (hardware independent)" {
  [Communication]
  [World]
  [Brain]
}

database "micro SD" {
  [Communication log]
  [World log]
  [brain state]
}

[XBee controller] --> [Communication]
[Communication] --> [Communication log]
#+END_SRC

** モニタリングとマニュアル操作コンポーネント
#+BEGIN_SRC plantuml :file ./images/monitoring-manual_controling.png
node "PC(Mac)" {
  [World monitoring] - [Wireless coordinator]
}

node "Robot" {
  [World] - [Wireless router]
}

[Wireless coordinator] - [Wireless router]
#+END_SRC

** ロボット状態シーケンス

#+BEGIN_SRC plantuml :file ./images/robot-state-sequence.png

box "Presentation"
participant Sensor
participant ObstacleDataProcessor
participant MapGenerator
participant WorldUpdater
end box

box "Domain"
participant World
participant Brain
end box

Sensor -> Sensor: accumulate data
Sensor -> ObstacleDataProcessor
ObstacleDataProcessor -> MapGenerator
MapGenerator -> WorldUpdater

WorldUpdater -> World
World -> Brain
Brain -> Brain
Brain -> World
#+END_SRC


* モジュール別詳細
** 役割別モジュール例
*** ワイヤレスシステム
**** 通信API: XBeeAPI - Communicationマッピング
XBeeAPIをベースに、ロボット本体とコントロールPCとの間のAPIを定義する。
XBeeAPIは、複数のXBeeモジュール間での通信APIだが、ここで定義するのは、ロボットとコントロールPCとの間でのデータAPIである。

***** 通信レイヤー
#+BEGIN_SRC ditaa :file ./images/wireless-api-layer.png
+---------------------+
|                     |
|                     |
|    Application      |
|                     |
|                     |
+---------------------+
                       
+---------------------+
|                     |
|                     |
|    XBee API         |
|                     |
|                     |
+---------------------+
                       
+---------------------+
|                     |
|                     |
|    ZigBee protocol  |
|                     |
|                     |
+---------------------+
#+END_SRC

***** TODO アプリケーションレイヤーAPI定義



**** マニュアルモード
***** シーケンス
****** TODO シーケンスのレベル
各種シーケンス図間の関係を説明する
****** プログラム単位のシーケンス
******* データ受信(ZigBee Receive Packet)
#+BEGIN_SRC plantuml :file ./images/wireless-data-receive.png
hide footbox

participant USBSerialPort
participant view
participant XBee
participant Decoder
participant Monitor

USBSerialPort -> USBSerialPort: open
XBee -> view: register (listener)
USBSerialPort -> view: Data frame
view -> XBee: notify
XBee -> Decoder: Data frame
Decoder -> Monitor: result
#+END_SRC

****** 最大シーケンスレベル（？）
- CommandLine
コマンドラインツール
- CommandMapper
エンコーダーとデコーダーの2つで構成される。
コマンドに入力したコマンドシークエンスをXBee APIフォームに変換し、その逆も。
- StateMapper
エンコーダーとデコーダーの2つで構成される。
XBee APIフォームデータをコマンドラインに表示できるように変換し、その逆も。

- XBeeCoodinator
XBee API Coodinator と設定されたXBeeハードモジュール
- XBeeRouter
XBee API Router と設定されたXBeeハードモジュール
- Robot
ロボット本体（mbedがコントロール部）

#+BEGIN_SRC plantuml :file ./images/wireless-manual-control.png
CommandLine -> CommandLine: rotate 33 degree
CommandLine -> CommandLine: move forward 30 mm

CommandLine -> CommandMapper: command packet
CommandMapper -> XBeeCoodinator: XBee API data frame

XBeeCoodinator -> XBeeRouter: IEEE802.15.4
XBeeRouter -> StateMapper: XBee API data frame

StateMapper -> Robot: command packet

Robot -> StateMapper: status response
StateMapper -> XBeeRouter: XBee API data frame
XBeeRouter -> XBeeCoodinator: IEEE802.15.4

XBeeCoodinator -> CommandMapper: XBee API data frame
CommandMapper -> CommandLine: status response

#+END_SRC

***** アクティビティ

#+BEGIN_SRC plantuml :file ./images/wireless-manual-activity.png
title Command line control activity flow

start

repeat

  :show Status;
  
  :enter a command;

  if (command is "quit"?) then (true)
    :exiting application;
    stop
  endif

  if (command is "run"?) then (true)
    :run(CommandSequence);
  elseif (command is valid) then (true)
    :add command to CommandSequence;
  endif
repeat while

stop

#+END_SRC

***** クラス構成

#+BEGIN_SRC plantuml :file ./images/wireless-manual-classes.png

package "RobotPresentation" {

}

package "ControllerPresentation" {

  class State {

  }

  class CommandEncoder {

  }

  class CommandDecoder {

  }

  class CommandSequence {
    -id
    -commands
  }

  class Command {
    -name
    +normalize()
  }

  class DataFrame {

  }
}
#+END_SRC

***** main psuedocode
#+BEGIN_SRC c++

void showStatus()
{
  printf('showing status');
}

void listCommands();
{
}

void run(CommandSequence sequence)
{
  encoder = CommandEncoder();

  encoded = encoder.encode(sequence);

  
}

int main()
{
  string command = '';

  sequence = CommandSequence();

  while (command !== QUIT) {

    printf('enter a command');

    listCommands();

    showStatus();

    if (command === RUN) {
      run(CommandSequence);
    } else if (/* command is valid */) {
      sequence.addCommand(command);
    }
  }

  printf('exiting program');

  return 0;
}
#+END_SRC


**** オートーモード
#+BEGIN_SRC plantuml :file ./images/wireless-auto-mode.png
CommandLine -> CommandMapper: command packet(enable-auto-mode)
CommandMapper -> XBeeCoodinator: XBee API data frame command packet
XBeeCoodinator -> XBeeRouter: IEEE802.15.4
XBeeRouter -> StateMapper: XBee API data frame command
StateMapper -> Robot: command packet

Robot -> Robot: AI action1

Robot -> StateMapper: action1 result
StateMapper -> XBeeRouter: XBee API data frame action1 result
XBeeRouter -> XBeeCoodinator: IEEE802.15.4
XBeeCoodinator -> CommandMapper: XBee API data frame action1 result
CommandMapper -> CommandLine: action1 result

Robot -> Robot: AI action2

Robot -> StateMapper: action2 result
StateMapper -> XBeeRouter: XBee API data frame action2 result
XBeeRouter -> XBeeCoodinator: IEEE802.15.4
XBeeCoodinator -> CommandMapper: XBee API data frame action2 result
CommandMapper -> CommandLine: action2 result

Robot -> Robot: AI action3

#+END_SRC

*** モニターとマニュアルコントロール
** 実装
*** ロボット本体側：モジュール別
**** XBee 無線制御部
***** XBee API mode
- 0x10=パケット送信
- 0x90=パケット受信
- 0x8B=パケット送信の成否

***** 無線通信フロー
****** 障害物センサーデータ
ロボット本体が回転し、同時にデータを収集しながら送信する。
- 通常時
#+BEGIN_SRC plantuml :file ./images/wireless_communication-flow_chart.png :exports none
Robot -> PC: Start signal
Robot -> PC: Sensed data 1 (角度 x0)
Robot -> PC: Sensed data 2 (角度 x1)
Robot -> PC: Sensed data 3 (角度 x2)
Robot -> PC: Sensed data 4 (角度 x3)
Robot -> PC: Sensed data 5 (角度 x4)

Robot <-- PC: Confirmed reponse
#+END_SRC

- エラー時
#+BEGIN_SRC plantuml :file ./images/wireless_communication-flow_chart-error.png :exports none
Robot -> PC: Sensed data 1 (角度 x0)
Robot -> PC: Sensed data 2 (角度 x1)
Robot -> PC: Sensed data 3 (角度 x2)
Robot -> Robot: error occurred

PC <-- PC: Time out : Error confirmation
#+END_SRC

***** libxbee
PC側（?）ライブラリ
[[https://github.com/thomasgubler/libxbee]]

#+BEGIN_SRC plantuml :file ./images/libxbee_class_diagram.png :exports none
xbee <|-- xbeep
systemtime <|-- xbee
#+END_SRC

大きすぎるため、これを参考にし自作を心がける。
***** XBee SmartLabXBeeAPI library
mbed側のライブラリ。必要でないものも多いので、自作を心がける。
****** Class diagram
#+BEGIN_SRC plantuml :file ./images/smart_lab_xbee_api_class_diagram.png :exports none
XBeeTx64Request <|-- XBeeAPI
XBeeTx16Request <|-- XBeeAPI
ZigBeeTxRequest <|-- XBeeAPI
ATCommandRequest <|-- XBeeAPI
ZigBeeExplicitTxRequest <|-- XBeeAPI
RemoteATCommandRequest <|-- XBeeAPI
PinConfigRequest <|-- XBeeAPI
RemotePinConfigRequest <|-- XBeeAPI
IODetectionConfigRequest <|-- XBeeAPI
RemoteIODetectionConfigRequest <|-- XBeeAPI
XBeeSensorReadResponse <|-- XBeeAPI
XBeeTxStatusResponse <|-- XBeeAPI
XBeeIODataSampleRx16Response <|-- XBeeAPI
XBeeIODataSampleRx64Response <|-- XBeeAPI
XBeeRx16Response <|-- XBeeAPI
XBeeRx64Response <|-- XBeeAPI
NodeIdentificationResponse <|-- XBeeAPI
ZigBeeIOSampleRxResponse <|-- XBeeAPI
RemoteATCommandResponse <|-- XBeeAPI
ZigBeeExplicitRxResponse <|-- XBeeAPI
ZigBeeRxResponse <|-- XBeeAPI
ZigBeeTxStatusResponse <|-- XBeeAPI
ModemStatusResponse <|-- XBeeAPI
ATCommandResponse <|-- XBeeAPI
PacketListener <|-- XBeeAPI
ZigBeeDiscoverAddress <|-- XBeeAPI

TxRequestBase <|-- XBeeTx64Request
TxRequestBase <|-- XBeeTx16Request
TxRequestBase <|-- ZigBeeTxRequest

CommandRequestBase <|-- ATCommandRequest
ExplicitAddress <|-- ZigBeeExplicitTxRequest
TxRequestBase <|-- ZigBeeExplicitTxRequest


OptionsBase <|-- RemoteATCommandRequest
DeviceAddress <|-- RemoteATCommandRequest
CommandRequestBase <|-- RemoteATCommandRequest

Pin <|-- PinConfigRequest
ATCommandRequest <|-- PinConfigRequest

RemoteATCommandRequest <|-- RemotePinConfigRequest
Pin <|-- RemotePinConfigRequest
RemoteCommandOptions <|-- RemotePinConfigRequest

ATCommands <|-- IODetectionConfigRequest
ATCommandRequest <|-- IODetectionConfigRequest

ATCommands <|-- RemoteIODetectionConfigRequest
RemoteATCommandRequest <|-- RemoteIODetectionConfigRequest

DeviceAddress <|-- XBeeSensorReadResponse
ResponseBase <|-- XBeeSensorReadResponse

TxStatusResponseBase <|-- XBeeTxStatusResponse

XBeeIODataSampleBase <|-- XBeeIODataSampleRx16Response
XBeeIODataSampleBase <|-- XBeeIODataSampleRx64Response

RxResponseBase <|-- XBeeRx16Response

DeviceAddress <|-- XBeeRx64Response
RxResponseBase <|-- XBeeRx64Response

DeviceAddress <|-- NodeIdentificationResponse
ResponseBase <|-- NodeIdentificationResponse

ZigBeePins <|-- ZigBeeIOSampleRxResponse
DeviceAddress <|-- ZigBeeIOSampleRxResponse
IOSamples <|-- ZigBeeIOSampleRxResponse
ResponseBase <|-- ZigBeeIOSampleRxResponse

CommandResponseBase <|-- RemoteATCommandResponse

RxResponseBase <|-- ZigBeeExplicitRxResponse
ExplicitAddress <|-- ZigBeeExplicitRxResponse

DeviceAddress <|-- ZigBeeRxResponse
RxResponseBase <|-- ZigBeeRxResponse

TxStatusResponseBase <|-- ZigBeeTxStatusResponse
ResponseBase <|-- ModemStatusResponse
CommandResponseBase <|-- ATCommandResponse

DeviceAddress <|-- ZigBeeDiscoverAddress


#+END_SRC

**** Ping 超音波センサー部
**** 状態インジケータ部
**** モータードライバ部
*** PC側

** 学習用拡張
*** シミュレータ
*** 等価Pythonコード
- 同じAIロジックをPythonコードで実現する



#+BEGIN_HTML
<style>
@import url(http://fonts.googleapis.com/css?family=Inconsolata);
@import url(http://fonts.googleapis.com/css?family=PT+Sans);
@import url(http://fonts.googleapis.com/css?family=PT+Sans+Narrow:400,700);
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
nav,
section,
summary {
  display: block;
}
audio,
canvas,
video {
  display: inline-block;
}
audio:not([controls]) {
  display: none;
  height: 0;
}
[hidden] {
  display: none;
}
html {
  font-family: sans-serif;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
}
body {
  margin: 0;
}
a:focus {
  outline: thin dotted;
}
a:active,
a:hover {
  outline: 0;
}
h1 {
  font-size: 2em;
}
abbr[title] {
  border-bottom: 1px dotted;
}
b,
strong {
  font-weight: bold;
}
dfn {
  font-style: italic;
}
mark {
  background: #ff0;
  color: #000;
}
code,
kbd,
pre,
samp {
  font-family: monospace, serif;
  font-size: 1em;
}
pre {
  white-space: pre-wrap;
  word-wrap: break-word;
}
q {
  quotes: "\201C" "\201D" "\2018" "\2019";
}
small {
  font-size: 80%;
}
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}
sup {
  top: -0.5em;
}
sub {
  bottom: -0.25em;
}
img {
  border: 0;
}
svg:not(:root) {
  overflow: hidden;
}
figure {
  margin: 0;
}
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}
legend {
  border: 0;
  padding: 0;
}
button,
input,
select,
textarea {
  font-family: inherit;
  font-size: 100%;
  margin: 0;
}
button,
input {
  line-height: normal;
}
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  cursor: pointer;
}
button[disabled],
input[disabled] {
  cursor: default;
}
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  padding: 0;
}
input[type="search"] {
  -webkit-appearance: textfield;
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  box-sizing: content-box;
}
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}
textarea {
  overflow: auto;
  vertical-align: top;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
html {
  font-family: 'PT Sans', sans-serif;
}
pre,
code {
  font-family: 'Inconsolata', sans-serif;
}
h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: 'PT Sans Narrow', sans-serif;
  font-weight: 700;
}
html {
  background-color: #eee8d5;
  color: #657b83;
  margin: 1em;
}
body {
  background-color: #fdf6e3;
  margin: 0 auto;
  border: 1pt solid #93a1a1;
  padding: 1em;
}
code {
  background-color: #eee8d5;
  padding: 2px;
}
a {
  color: #b58900;
}
a:visited {
  color: #cb4b16;
}
a:hover {
  color: #cb4b16;
}
h1 {
  color: #d33682;
}
h2,
h3,
h4,
h5,
h6 {
  color: #859900;
}
pre {
  background-color: #fdf6e3;
  color: #657b83;
  border: 1pt solid #93a1a1;
  padding: 1em;
  box-shadow: 5pt 5pt 8pt #eee8d5;
}
pre code {
  background-color: #fdf6e3;
}
h1 {
  font-size: 2.8em;
}
h2 {
  font-size: 2.4em;
}
h3 {
  font-size: 1.8em;
}
h4 {
  font-size: 1.4em;
}
h5 {
  font-size: 1.3em;
}
h6 {
  font-size: 1.15em;
}
.tag {
  background-color: #eee8d5;
  color: #d33682;
  padding: 0 0.2em;
}
.todo,
.next,
.done {
  color: #fdf6e3;
  background-color: #dc322f;
  padding: 0 0.2em;
}
.tag {
  -webkit-border-radius: 0.35em;
  -moz-border-radius: 0.35em;
  border-radius: 0.35em;
}
.TODO {
  -webkit-border-radius: 0.2em;
  -moz-border-radius: 0.2em;
  border-radius: 0.2em;
  background-color: #2aa198;
}
.NEXT {
  -webkit-border-radius: 0.2em;
  -moz-border-radius: 0.2em;
  border-radius: 0.2em;
  background-color: #268bd2;
}
.ACTIVE {
  -webkit-border-radius: 0.2em;
  -moz-border-radius: 0.2em;
  border-radius: 0.2em;
  background-color: #268bd2;
}
.DONE {
  -webkit-border-radius: 0.2em;
  -moz-border-radius: 0.2em;
  border-radius: 0.2em;
  background-color: #859900;
}
.WAITING {
  -webkit-border-radius: 0.2em;
  -moz-border-radius: 0.2em;
  border-radius: 0.2em;
  background-color: #cb4b16;
}
.HOLD {
  -webkit-border-radius: 0.2em;
  -moz-border-radius: 0.2em;
  border-radius: 0.2em;
  background-color: #d33682;
}
.NOTE {
  -webkit-border-radius: 0.2em;
  -moz-border-radius: 0.2em;
  border-radius: 0.2em;
  background-color: #d33682;
}
.CANCELLED {
  -webkit-border-radius: 0.2em;
  -moz-border-radius: 0.2em;
  border-radius: 0.2em;
  background-color: #859900;
}
</style>
#+END_HTML
